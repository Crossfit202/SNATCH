import { Component, OnInit } from '@angular/core';
import { Personnel } from '../models/Personnel';
import { Skill } from '../models/Skill';
import { PersonnelService } from '../services/personnel.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { NavbarComponent } from '../reused-components/navbar.component';
import { SkillService } from '../services/skill.service'; // Service for retrieving skills

@Component({
  selector: 'app-personnel',
  imports: [CommonModule, FormsModule, NavbarComponent],
  templateUrl: './personnel.component.html',
  styleUrl: './personnel.component.css'
})
export class PersonnelComponent implements OnInit {

  personnels: Personnel[] = []; // Stores list of all personnel
  skills: Skill[] = []; // Stores list of available skills for dropdown selection
  newPersonnel: Personnel = new Personnel(0, '', '', '', false, null, []); // New personnel object
  editingPersonnelId: number | null = null; // Tracks which personnel is being edited
  selectedPersonnel: Personnel | null = null; // Stores selected personnel for editing

  constructor(private personnelService: PersonnelService, private skillService: SkillService) { }

  ngOnInit(): void {
    this.loadPersonnels(); // Load personnel list on component initialization
    this.loadSkills(); // Load available skills on component initialization
  }

  /**
   * Loads all personnel from the backend
   */
  loadPersonnels(): void {
    this.personnelService.getAllPersonnels().subscribe((personnels: Personnel[]) => {
      this.personnels = personnels.map(personnel => ({
        ...personnel,
        isAssigned: personnel.assigned ?? false // ✅ Map `assigned` to `isAssigned` to prevent undefined errors
      }));
    });
  }

  /**
   * Loads all available skills from the backend
   */
  loadSkills(): void {
    this.skillService.getAllSkills().subscribe((skills: Skill[]) => {
      this.skills = skills;
    });
  }

  /**
   * Adds a new personnel to the backend and updates the UI
   */
  addPersonnel(): void {
    const personnelPayload = {
      personnelId: 0, // ID is generated by the backend
      personnelName: this.newPersonnel.personnelName,
      species: this.newPersonnel.species,
      profileImg: this.newPersonnel.profileImg || 'default.png', // Assign default image if not provided
      isAssigned: false, // New personnel start as unassigned
      crew: null, // Always null initially
      skills: this.newPersonnel.skills.map(skill => ({
        skillId: skill.skillId,
        skillName: skill.skillName,
        personnels: [] // Backend expects an empty array
      }))
    };

    this.personnelService.addPersonnel(personnelPayload).subscribe((personnel: Personnel) => {
      this.personnels.push(personnel); // Add new personnel to the list
      this.newPersonnel = new Personnel(0, '', '', '', false, null, []); // Reset form fields
    });
  }

  /**
   * Updates an existing personnel entry in the backend
   */
  updatePersonnel(): void {
    if (!this.selectedPersonnel) return;

    const personnelPayload = {
      personnelId: this.selectedPersonnel.personnelId,
      personnelName: this.selectedPersonnel.personnelName,
      species: this.selectedPersonnel.species,
      profileImg: this.selectedPersonnel.profileImg,
      isAssigned: this.selectedPersonnel.isAssigned,
      crew: this.selectedPersonnel.crew ? { crewId: this.selectedPersonnel.crew.crewId } : null, // ✅ Keep crew if assigned
      skills: this.selectedPersonnel.skills.map(skill => ({
        skillId: skill.skillId, // Send only necessary fields
        skillName: skill.skillName,
        personnels: [] // To match backend expectations
      }))
    };

    this.personnelService.updatePersonnel(this.selectedPersonnel.personnelId, personnelPayload).subscribe(() => {
      this.loadPersonnels(); // Refresh personnel list
      this.closeEditPopup(); // ✅ Close modal after update
    });
  }

  /**
   * Custom method to compare skills for selection
   * Ensures that selected skills persist in multi-select dropdowns
   */
  compareSkills(skill1: Skill, skill2: Skill): boolean {
    return skill1 && skill2 ? skill1.skillId === skill2.skillId : false;
  }

  /**
   * Opens the edit popup for a selected personnel
   * @param personnel - The personnel object to be edited
   */
  openEditPopup(personnel: Personnel): void {
    this.editingPersonnelId = personnel.personnelId;
    this.selectedPersonnel = { ...personnel, skills: personnel.skills || [] }; // Ensure skills array exists
    document.body.classList.add("modal-open"); // Prevent background scrolling when modal is open
  }

  /**
   * Closes the edit popup and resets selectedPersonnel
   */
  closeEditPopup(): void {
    this.editingPersonnelId = null;
    this.selectedPersonnel = null;
    document.body.classList.remove("modal-open"); // Re-enable background scrolling
  }

  /**
   * Deletes a personnel entry from the backend and updates the UI
   * @param id - The ID of the personnel to delete
   */
  deletePersonnel(id: number): void {
    this.personnelService.deletePersonnel(id).subscribe(() => {
      this.loadPersonnels(); // Refresh personnel list after deletion
    });
  }
}
